<<<<<<< HEAD
<<<<<<< HEAD
library(dplyr)
library(tidyr)
df_orders <- read.csv('orders.csv')
df_order_items <- read.csv('order_items.csv')
df_categories <-  read.csv('categories.csv')
library(dplyr)
library(tidyr)
df_orders <- read.csv('orders.csv')
df_orders <- read.csv('orders.csv')
getwd()
df_orders <- read.csv(r"C:\Users\Kasia\Desktop\TWD\homeworks\hw1\orders.csv", "rt")
df_orders <- read.csv('homeworks/hw1/orders.csv')
getwd()
### Przetwarzanie Danych Ustrukturyzowanych 2024L
### Praca domowa nr. 3
###
### UWAGA:
### nazwy funkcji oraz ich parametrow powinny pozostac niezmienione.
###
### Wskazane fragmenty kodu przed wyslaniem rozwiazania powinny zostac
### zakomentowane
###
getwd
### Przetwarzanie Danych Ustrukturyzowanych 2024L
### Praca domowa nr. 3
###
### UWAGA:
### nazwy funkcji oraz ich parametrow powinny pozostac niezmienione.
###
### Wskazane fragmenty kodu przed wyslaniem rozwiazania powinny zostac
### zakomentowane
###
getwd()
# -----------------------------------------------------------------------------#
# Wczytanie danych oraz pakietow.
# !!! Przed wyslaniem zakomentuj ten fragment
# -----------------------------------------------------------------------------#
Posts <- read.csv("Posts.csv.gz")
######## wczytanie
library(readxl)
library(dplyr)
library(tidyr)
#install.packages(readxl)
poland <- read.csv("Poland.csv", sep = ";")
library(fmsb)
radar_data <- data.frame(
mean_transplants_male = recipient_demographics_new$mean_transplants_male,
mean_transplants_female = recipient_demographics_new$mean_transplants_female
)
recipient_demographics_new <- recipient_demographics %>%
group_by(`Transplant Year`, `Donor Type`) %>%
=======
library(ggplot2)
library(tidyr)
df2<-data_frame(Group=c("Men, (18-44)","Women, (18-44)","Men, 45+","Women, 45+"),
Kamala_Harris=c(20,30,15,35),
Donald_Trump=c(10,40,25,25))
df2<-pivot_longer(df,cols=c("Kamala_Harris","Donald_Trump"),names_to="Candidate",values_to="perc") %>%
ggplot(df,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")
View(df2)
df2<-data_frame(Group=c("Men, (18-44)","Women, (18-44)","Men, 45+","Women, 45+"),
Kamala_Harris=c(20,30,15,35),
Donald_Trump=c(10,40,25,25))
df2<-pivot_longer(df,cols=c("Kamala_Harris","Donald_Trump"),names_to="Candidate",values_to="perc") %>%
ggplot(df,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")
df2<-data_frame(Group=c("Men, (18-44)","Women, (18-44)","Men, 45+","Women, 45+"),
Kamala_Harris=c(20,30,15,35),
Donald_Trump=c(10,40,25,25))
df2<-pivot_longer(df,cols=c("Kamala_Harris","Donald_Trump"),names_to="Candidate",values_to="perc")
df2<-data_frame(Group=c("Men, (18-44)","Women, (18-44)","Men, 45+","Women, 45+"),
Kamala_Harris=c(20,30,15,35),
Donald_Trump=c(10,40,25,25))
df2<-data_frame(Group=c("Men, (18-44)","Women, (18-44)","Men, 45+","Women, 45+"),
Kamala_Harris=c(20,30,15,35),
Donald_Trump=c(10,40,25,25))
df2<-pivot_longer(df2,cols=c("Kamala_Harris","Donald_Trump"),names_to="Candidate",values_to="perc")
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")+
labs(title="How",
y="Percentage of support (%)")
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")+
labs(title="How",
y="Percentage of support (%)")+
scale_fill_manual(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")+
labs(title="How",
y="Percentage of support (%)")#+
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")+
labs(title="How",
y="Percentage of support (%)")#+
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")+
labs(title="How",
y="Percentage of support (%)")+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
geom_text(aes(label=perc),color="white",position = position_dodge(width = 0.9),vjust = 1.5,size=4)+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity")+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity",width = 0.5)+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity",width = 0.5)+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
geom_text(aes(label = perc),position = position_stack(vjust = 0.5), size = 3) +
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity",width = 0.5)+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
geom_text(aes(label =paste0(perc, "%")),position = position_stack(vjust = 0.5), size = 3) +
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity",width = 0.5)+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
geom_text(aes(label =paste0(perc, "%")),position = position_stack(vjust = 0.5), size = 3) +
scale_fill_manual(values = c("salmon", "darkgreen", "cyan", "plum"))+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity",width = 0.5)+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
geom_text(aes(label =paste0(perc, "%")),position = position_stack(vjust = 0.5), size = 3,color=white) +
scale_fill_manual(values = c("darkblue", "blue", "cyan", "plum"))+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity",width = 0.5)+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
geom_text(aes(label =paste0(perc, "%")),position = position_stack(vjust = 0.5), size = 3,color="white") +
scale_fill_manual(values = c("darkblue", "blue", "cyan", "plum"))+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity",width = 0.5)+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
geom_text(aes(label =paste0(perc, "%")),position = position_stack(vjust = 0.5), size = 4,color="white") +
scale_fill_manual(values = c("darkblue", "blue", "cyan", "plum"))+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity",width = 0.5)+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
geom_text(aes(label =paste0(perc, "%")),position = position_stack(vjust = 0.5), size = 3,color="white") +
scale_fill_manual(values = c("darkblue", "blue", "cyan", "plum"))+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
ggplot(df2,aes(x=Candidate,y=perc,fill=Group))+
geom_bar(stat="identity",width = 0.5)+
labs(title="Trump and Harris voters by sex and age",
y="Percentage of support (%)")+
theme_minimal()+
geom_text(aes(label =paste0(perc, "%")),position = position_stack(vjust = 0.5), size = 3,color="white") +
scale_fill_manual(values = c("darkgreen", "darkblue", "darkorange", "darkred"))+
scale_x_discrete(labels=c("Kamala_Harris"="Kamala Harris","Donald_Trump"="Donald Trump"))
library(dplyr)
library(tidyverse)
library(ggplot2)
library(maps)
deaths<-read.csv("C:\\Users\\Zuzia\\Downloads\\Table_3.csv")
world_map <- map_data("world")
# Filtrowanie danych mapy dla Europy
Europe <- world_map %>%
filter(long > -14 & long < 45 & lat > 36 & lat < 73)
deaths<-deaths %>%
select(Country,Total) %>%
mutate(Country=ifelse(Country=="Czechia","Czech Republic",Country)) %>%
mutate(Country=ifelse(Country=="Türkiye","Turkey",Country)) %>%
right_join(Europe,join_by(Country==region))
ggplot(deaths, aes(x = long, y = lat, group = group, fill = Total))+
geom_polygon(color = "#F0F4EF",size=0.2) +
scale_fill_gradient(high="#F2059F",low="#433df2", na.value = "gray90", name = "Mortality rates\nper million") +
theme_void() +  # Usunięcie osi i siatki
labs(title = "Drug-induced mortality rates per million among adults (15-64).") +
theme(legend.position = "right",
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
plot.title = element_text(color = "#F0F4EF",face="bold",size=20),
legend.title = element_text(color = "#F0F4EF",size=16),
legend.text = element_text(color = "#F0F4EF",size=16))
ggsave("wykres.png", bg = "transparent")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(maps)
deaths<-read.csv("C:\\Users\\Zuzia\\Downloads\\Table_3.csv")
world_map <- map_data("world")
# Filtrowanie danych mapy dla Europy
Europe <- world_map %>%
filter(long > -14 & long < 45 & lat > 36 & lat < 73)
deaths<-deaths %>%
select(Country,Total) %>%
mutate(Country=ifelse(Country=="Czechia","Czech Republic",Country)) %>%
mutate(Country=ifelse(Country=="Türkiye","Turkey",Country)) %>%
right_join(Europe,join_by(Country==region))
ggplot(deaths, aes(x = long, y = lat, group = group, fill = Total))+
geom_polygon(color = "#F0F4EF",size=0.2) +
scale_fill_gradient(high="#F2059F",low="#433df2", na.value = "gray90", name = "Mortality rates\nper million") +
theme_void() +  # Usunięcie osi i siatki
labs(title = "Drug-induced mortality rates per million among adults (15-64).") +
theme(legend.position = "right",
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
plot.title = element_text(color = "#F0F4EF",face="bold",size=12),
legend.title = element_text(color = "#F0F4EF",size=8),
legend.text = element_text(color = "#F0F4EF",size=8))
ggsave("wykres.png", bg = "transparent")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(maps)
deaths<-read.csv("C:\\Users\\Zuzia\\Downloads\\Table_3.csv")
world_map <- map_data("world")
# Filtrowanie danych mapy dla Europy
Europe <- world_map %>%
filter(long > -14 & long < 45 & lat > 36 & lat < 73)
deaths<-deaths %>%
select(Country,Total) %>%
mutate(Country=ifelse(Country=="Czechia","Czech Republic",Country)) %>%
mutate(Country=ifelse(Country=="Türkiye","Turkey",Country)) %>%
right_join(Europe,join_by(Country==region))
ggplot(deaths, aes(x = long, y = lat, group = group, fill = Total))+
geom_polygon(color = "#F0F4EF",size=0.2) +
scale_fill_gradient(high="#F2059F",low="#433df2", na.value = "gray90", name = "Mortality rates\nper million") +
theme_void() +  # Usunięcie osi i siatki
labs(title = "Drug-induced mortality rates per million among adults (15-64).") +
theme(legend.position = "right",
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
plot.title = element_text(color = "#F0F4EF",face="bold",size=14),
legend.title = element_text(color = "#F0F4EF",size=10),
legend.text = element_text(color = "#F0F4EF",size=10))
ggsave("wykres.png", bg = "transparent")
library(dplyr)
library(tidyverse)
library(ggplot2)
library(maps)
deaths<-read.csv("C:\\Users\\Zuzia\\Downloads\\Table_3.csv")
world_map <- map_data("world")
# Filtrowanie danych mapy dla Europy
Europe <- world_map %>%
filter(long > -14 & long < 45 & lat > 36 & lat < 73)
deaths<-deaths %>%
select(Country,Total) %>%
mutate(Country=ifelse(Country=="Czechia","Czech Republic",Country)) %>%
mutate(Country=ifelse(Country=="Türkiye","Turkey",Country)) %>%
right_join(Europe,join_by(Country==region))
ggplot(deaths, aes(x = long, y = lat, group = group, fill = Total))+
geom_polygon(color = "#F0F4EF",size=0.2) +
scale_fill_gradient(high="#F2059F",low="#433df2", na.value = "gray90", name = "Mortality rates\nper million") +
theme_void() +  # Usunięcie osi i siatki
labs(title = "Drug-induced mortality rates per million among adults (15-64).") +
theme(legend.position = "right",
panel.background = element_rect(fill = "transparent", color = NA),
plot.background = element_rect(fill = "transparent", color = NA),
plot.title = element_text(color = "#F0F4EF",face="bold",size=12),
legend.title = element_text(color = "#F0F4EF",size=10),
legend.text = element_text(color = "#F0F4EF",size=10))
ggsave("wykres.png", bg = "transparent")
library(shiny)
library(fsmb)
install.packages(fsmb)
install.packages('fsmb')
library(fsmb)
library(fmsb)
library(fmsb)
install.packages('fmsb')
library(fmsb)
df<- read.csv("Zuzia.csv")
df<- read.csv("Zuzia.csv")
df<- read.csv("Zuzia.csv")
library(shiny)
library(fmsb)
library(dplyr)
library(tidyr)
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
Zuzia<- read.csv("Zuzia.csv")
Zuzia$time.started <- as.POSIXct(Zuzia$time.started,format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Zuzia$time.ended <- as.POSIXct(Zuzia$time.ended, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Zuzia$start.hour = as.numeric(format(Zuzia$time.started,"%H"))
Zuzia$start.minute = as.numeric(format(Zuzia$time.started, "%M"))
Zuzia$start.hour[Zuzia$start.hour == 0] <- 24
Zuzia$end.hour= as.numeric(format(Zuzia$time.ended,"%H"))
Zuzia$end.minute = as.numeric(format(Zuzia$time.ended, "%M"))
Zuzia$end.hour[Zuzia$end.hour == 0] <- 24
Kasia<-read.csv("Kasia.csv")
Kasia$time.started <- as.POSIXct(Kasia$time.started,format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Kasia$time.ended <- as.POSIXct(Kasia$time.ended, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Kasia$start.hour = as.numeric(format(Kasia$time.started,"%H"))
Kasia$start.minute = as.numeric(format(Kasia$time.started, "%M"))
Kasia$start.hour[Kasia$start.hour == 0] <- 24
Kasia<-read.csv("Kasia.csv")
shiny::runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
Zuzia$time.ended <- as.POSIXct(Zuzia$time.ended, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Zuzia$start.hour = as.numeric(format(Zuzia$time.started,"%H"))
Zuzia$start.minute = as.numeric(format(Zuzia$time.started, "%M"))
Zuzia$start.hour[Zuzia$start.hour == 0] <- 24
Zuzia$end.hour= as.numeric(format(Zuzia$time.ended,"%H"))
Zuzia$end.minute = as.numeric(format(Zuzia$time.ended, "%M"))
Zuzia$end.hour[Zuzia$end.hour == 0] <- 24
Kasia<-read.csv("kasia2.csv")
Kasia$time.started <- as.POSIXct(Kasia$time.started,format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Kasia$time.ended <- as.POSIXct(Kasia$time.ended, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Kasia$start.hour = as.numeric(format(Kasia$time.started,"%H"))
Zuzia<- read.csv("Zuzia.csv")
Zuzia$time.started <- as.POSIXct(Zuzia$time.started,format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Zuzia$time.ended <- as.POSIXct(Zuzia$time.ended, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Zuzia$start.hour = as.numeric(format(Zuzia$time.started,"%H"))
Zuzia$start.minute = as.numeric(format(Zuzia$time.started, "%M"))
Zuzia$start.hour[Zuzia$start.hour == 0] <- 24
=======
df_order_items <- read.csv('order_items.csv')
df_products <- read.csv('products.csv')
df_brands <- read.csv('brands.csv')
df_categories <-  read.csv('categories.csv')
df_customers <- read.csv('customers.csv')
df_orders <- read.csv('orders.csv')
df_orders <- read.csv('orders.csv')
x <- c("a", "b", "c")
y <- c(1, 3, 2)
# ~ matplotlib / ggplot2
fig <- plot_ly() %>%
add_lines(x = x, y = y) %>%
layout(
title = "sample figure",
xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
plot_bgcolor = "#c7daec"
)
## https://plotly.com/r
## https://github.com/plotly/plotly.R/issues
>>>>>>> 9358b177838ff8eae7667a5a5d24db29fcf29957
library(plotly)
library(dplyr)
# ~ matplotlib / ggplot2
fig <- plot_ly() %>%
add_lines(x = x, y = y) %>%
layout(
title = "sample figure",
xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
plot_bgcolor = "#c7daec"
)
# obiekt jak w ggplot2
str(fig$x)
plot_ly(x = x, y = y) # No trace type specified
# ~ matplotlib / ggplot2
fig <- plot_ly() %>%
add_lines(x = x, y = y) %>%
layout(
title = "sample figure",
xaxis = list(title = 'x'),
yaxis = list(title = 'y'),
plot_bgcolor = "#c7daec"
)
View(fig)
plot_ly(x = x, y = y) # No trace type specified
plot_ly(x = x, y = y, type = 'type')
plot_ly(x = x, y = y, type = 'bar')
plot_ly(x = x, y = y, type = 'scatter') # No scatter mode specified
## https://plotly.com/r/reference/#scatter-mode
plot_ly(x = x, y = y, type = 'scatter', mode = 'lines')
# wykres statyczny
fig <- plot_ly() %>%
add_trace(x = x, y = y, type = "bar")
config(fig, staticPlot = TRUE)
?config
# wykres bez zoom i przycisków
fig %>%
layout(xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE)) %>%
config(displayModeBar = FALSE)
# wykres bez zoom i przycisków
fig %>%
layout(xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE))
# wykres bez zoom i przycisków
fig %>%
layout(xaxis = list(fixedrange = TRUE), yaxis = list(fixedrange = TRUE)) %>%
config(displayModeBar = FALSE)
# ~ seaborn / ggplot2
df_raw <- read.csv("https://raw.githubusercontent.com/mini-pw/2021Z-DataVisualizationTechniques/master/labs/data/Pokemon.csv")[,-1]
View(df_raw)
df <- df_raw %>%
filter(Type.1 %in% c("Fire", "Water", "Grass", "Poison", "Electric")) %>%
mutate(Type.1 = factor(Type.1, levels = c("Fire", "Water", "Grass", "Poison",  "Electric")))
View(df)
plot_ly(
data = df,
x = ~Attack,
y = ~Defense,
color = ~Type.1,
colors = "Set1"
)
## 3D
plot_ly(
data = df,
x = ~Attack,
y = ~Defense,
z = ~HP,
color = ~Type.1,
colors = "Set1",
type = "scatter3d",
mode = "markers"
)
plot_ly(
data = df,
x = ~Attack,
y = ~Defense,
z = ~Speed,
color = ~Type.1,
colors = "Set1",
symbol = ~Type.1,
symbols = c('circle', 'cross', 'diamond', 'square', 'circle'),
marker = list(size = 5, line = list(color = 'black', width = 1)),
type = "scatter3d",
mode = "markers"
)
## tooltip https://plotly.com/r/hover-text-and-formatting
## legend https://plotly.com/r/legend
plot_ly(
data = df,
x = ~Attack,
y = ~Defense,
color = ~Legendary,
colors = c("black", "red"),
text = paste0("Name: ", df$Name, "<br>Stage: ", df$Stage),
hoverinfo = 'x+y+text'
# hovertemplate = paste('<b>%{text}</b><br><b>X</b>: %{x}<br><b>Y</b>: %{y} <extra>tooltip</extra>')
) %>%
<<<<<<< HEAD
ungroup()
}
x<-split_activity_minutes(Zuzia)
Zuzia<- read.csv("Zuzia.csv")
Zuzia$time.started <- as.POSIXct(Zuzia$time.started,format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Zuzia$time.ended <- as.POSIXct(Zuzia$time.ended, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Zuzia$start.hour = as.numeric(format(Zuzia$time.started,"%H"))
Zuzia$start.minute = as.numeric(format(Zuzia$time.started, "%M"))
Zuzia$start.hour[Zuzia$start.hour == 0] <- 24
Zuzia$end.hour= as.numeric(format(Zuzia$time.ended,"%H"))
Zuzia$end.minute = as.numeric(format(Zuzia$time.ended, "%M"))
Zuzia$end.hour[Zuzia$end.hour == 0] <- 24
Kasia<-read.csv("kasia2.csv")
Kasia$time.started <- as.POSIXct(Kasia$time.started,format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Kasia$time.ended <- as.POSIXct(Kasia$time.ended, format = "%Y-%m-%d %H:%M:%S", tz = "UTC")
Kasia$start.hour = as.numeric(format(Kasia$time.started,"%H"))
Zuzia<- read.csv("Zuzia.csv")
Zuzia<- read.csv("Zuzia.csv")
shiny::runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
shiny::runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
install.packages("highcharter")
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd_proj2')
Zuzia_dzien <- read.csv("nasz_dzien(Zuzia).csv",sep=";")
Kasia_dzien <- read.csv("nasz_dzien(Kasia).csv",sep=";")
Milosz_dzien <- read.csv("nasz_dzien(Milosz).csv",sep=";")
process_daily_data <- function(data, user) {
data <- data %>%
filter(X=="Unlocked" | X=="Notifications"  | X=="Total time")%>%
pivot_longer(cols = -1, names_to = "date", values_to = "time_spent") %>%
rename(application = 1) %>%
>>>>>>> 305474c4edee742db628a779a0cff8429bb48c65
mutate(
`Male Distinct Recipients` = case_when(
`Organ Transplanted` == "Kidney" ~
`Male Distinct Recipients` +
sum(`Male Distinct Recipients`[`Organ Transplanted` == "Kidney-Pancreas"]),
`Organ Transplanted` == "Pancreas" ~
`Male Distinct Recipients` +
sum(`Male Distinct Recipients`[`Organ Transplanted` == "Kidney-Pancreas"]),
TRUE ~ `Male Distinct Recipients`
), `Female Distinct Recipients` = case_when(
`Organ Transplanted` == "Kidney" ~
`Female Distinct Recipients` +
sum(`Female Distinct Recipients`[`Organ Transplanted` == "Kidney-Pancreas"]),
`Organ Transplanted` == "Pancreas" ~
`Female Distinct Recipients` +
sum(`Female Distinct Recipients`[`Organ Transplanted` == "Kidney-Pancreas"]),
TRUE ~ `Female Distinct Recipients`
)
<<<<<<< HEAD
) %>%
ungroup() %>%
filter(`Organ Transplanted` %in% c('Kidney', 'Pancreas', 'Lung', 'Heart', 'Liver')) %>%
group_by(`Organ Transplanted`) %>%
summarise(mean_transplants_male = mean(`Male Distinct Recipients`, na.rm = TRUE),
mean_transplants_female
= mean(`Female Distinct Recipients`, na.rm = TRUE)) %>%
pivot_wider(
names_from = `Organ Transplanted`,
values_from = c(mean_transplants_male, mean_transplants_female)
)
library(dplyr)
library(readxl)
crime_dt <- read_excel("Transnational_Crime.xlsx", sheet = "Organs") %>% select(-Country)
library(dplyr)
library(tidyr)
df_orders <- read.csv('homeworks/hw1/dane/orders.csv')
shiny::runApp('C:/Users/Kasia/Desktop/TWD/TWD2/Aplikacja')
setwd("C:/Users/Kasia/Desktop/TWD/TWD2/Aplikacja")
shiny::runApp()
=======
return(data)
}
Kasia_dzien <- process_daily_data(Kasia_dzien, "Kasia")
Zuzia_dzien <- process_daily_data(Zuzia_dzien, "Zuzia")
View(apps_df)
Zuzia_dzien <- read.csv("nasz_dzien(Zuzia).csv",sep=";")
df_zuzia<-process_daily_data2(zuzia_apps_df1,"Zuzia")
df_kasia<-process_daily_data2(kasia_apps_df1,"Kasia")
df_milosz<-process_daily_data2(milosz_apps_df1,"Milosz")
stats<-rbind(df_milosz,df_kasia,df_zuzia)
View(stats)
process_daily_data2 <- function(data, user) {
data <- data %>%
filter(X == "Unlocked" | X == "Notifications" | X == "Total time") %>%
pivot_longer(cols = -1, names_to = "date", values_to = "value") %>%
rename(application = 1) %>%
mutate(
date = as.Date(sub("^X", "", date), format = "%Y.%m.%d"),
# Dla 'Total time' konwertujemy wartość na minuty
value = ifelse(application == "Total time",
round(as.numeric(as.difftime(value, format="%H:%M:%S", units="mins"))),
as.numeric(value)),
# Dla powiadomień i odblokowań traktujemy je jako liczbę
value = ifelse(application == "Notifications" | application == "Unlocked",
as.numeric(value),
value),
user = user
=======
layout(
legend = list(
x = 0.1, y = 0.9,
title = list(text = "Legendary"),
bgcolor = "#E2E2E2"
)
>>>>>>> 9358b177838ff8eae7667a5a5d24db29fcf29957
)
## tooltip https://plotly.com/r/hover-text-and-formatting
## legend https://plotly.com/r/legend
plot_ly(
data = df,
x = ~Attack,
y = ~Defense,
color = ~Legendary,
colors = c("black", "red"),
text = paste0("Name: ", df$Name, "<br>Stage: ", df$Stage),
hoverinfo = 'x+y+text'
hovertemplate = paste('<b>%{text}</b><br><b>X</b>: %{x}<br><b>Y</b>: %{y} <extra>tooltip</extra>')
## tooltip https://plotly.com/r/hover-text-and-formatting
## legend https://plotly.com/r/legend
plot_ly(
data = df,
x = ~Attack,
y = ~Defense,
color = ~Legendary,
colors = c("black", "red"),
text = paste0("Name: ", df$Name, "<br>Stage: ", df$Stage),
hoverinfo = 'x+y+text',
hovertemplate = paste('<b>%{text}</b><br><b>X</b>: %{x}<br><b>Y</b>: %{y} <extra>tooltip</extra>')
) %>%
layout(
legend = list(
x = 0.1, y = 0.9,
title = list(text = "Legendary"),
bgcolor = "#E2E2E2"
)
)
## dropdown https://plotly.com/r/dropdowns
## buttons https://plotly.com/r/custom-buttons
plot_ly(
data = df,
x = ~Type.1,
y = ~Attack,
type = "box"
) %>% layout(
title = "Attack distribution",
xaxis = list(title = "TYPE"),
yaxis = list(range = c(0, 140)),
updatemenus = list(
list(
x = 1, y = 1,
buttons = list(
list(method = "restyle",
args = list("type", "box"),
label = "Boxplot"),
list(method = "restyle",
args = list("type", "violin"),
label = "Violinplot")
))
))
pokemons_with_3stages <- na.omit(sapply(which(df$Stage == 1), function(i) ifelse(sum(df$Stage[i:(i+2)]) == 6, i, NA)))
pokemons_with_3stages_all <- c(pokemons_with_3stages, pokemons_with_3stages+1, pokemons_with_3stages+2)
pokemons_with_3stages_names <- paste0(df$Name[pokemons_with_3stages], "_", df$Name[pokemons_with_3stages+1], "_", df$Name[pokemons_with_3stages+2])
pokemons_with_3stages_all_names <- rep(pokemons_with_3stages_names, 3)
df_evolution <- df[pokemons_with_3stages_all,] %>%
mutate(evolution = pokemons_with_3stages_all_names)
# - #
## sliders https://plotly.com/r/sliders
## range sliders https://plotly.com/r/range-slider
steps <- list(
list(args = list(list("marker.color" = list("red"),
"marker.symbol" = list("square"))),
label = "Red Squares",
method = "restyle",
value = "1"
),
list(args = list(list("marker.color" = list("black"),
"marker.symbol" = list("diamond"))),
label = "Black Diamonds",
method = "restyle",
value = "2"
),
list(args = list(list("marker.color" = list("grey"),
"marker.symbol" = list("circle"))),
label = "Grey Circles",
method = "restyle",
value = "3"
)
)
plot_ly(
data = df_evolution,
x = ~Stage,
y = ~Attack,
color = ~evolution,
colors = "Set1",
type = "scatter",
mode = "lines+markers",
marker = list(size = 10)
) %>%
layout(
xaxis = list(tickvals = c(1, 2, 3)),
sliders = list(
list(
active = 0,
currentvalue = list(prefix = "Palette: "),
pad = list(t = 60),
steps = steps
)
)
)
plot_ly(
data = df_evolution,
x = ~Stage,
y = ~Attack,
color = ~evolution,
colors = "Set1",
type = "scatter",
mode = "lines+markers",
marker = list(size = 10)
) %>%
layout(
xaxis = list(tickvals = c(1, 2, 3)),
sliders = list(
list(
active = 0,
currentvalue = list(prefix = "Palette: "),
pad = list(t = 60),
steps = steps
)
)
)
## tooltip https://plotly.com/r/hover-text-and-formatting
## legend https://plotly.com/r/legend
plot_ly(
data = df,
x = ~Attack,
y = ~Defense,
color = ~Legendary,
colors = c("black", "red"),
text = paste0("Name: ", df$Name, "<br>Stage: ", df$Stage),
hoverinfo = 'x+y+text',
hovertemplate = paste('<b>%{text}</b><br><b>X</b>: %{x}<br><b>Y</b>: %{y} <extra>tooltip</extra>')
) %>%
layout(
legend = list(
x = 0.1, y = 0.9,
title = list(text = "Legendary"),
bgcolor = "#E2E2E2"
)
)
## dropdown https://plotly.com/r/dropdowns
## buttons https://plotly.com/r/custom-buttons
plot_ly(
data = df,
x = ~Type.1,
y = ~Attack,
type = "box"
) %>% layout(
title = "Attack distribution",
xaxis = list(title = "TYPE"),
yaxis = list(range = c(0, 140)),
updatemenus = list(
list(
x = 1, y = 1,
buttons = list(
list(method = "restyle",
args = list("type", "box"),
label = "Boxplot"),
list(method = "restyle",
args = list("type", "violin"),
label = "Violinplot")
))
))
View(df)
plot_ly(
data = df,
x = ~Type.1,
y = ~Speed,
type = "box"
) %>% layout(
title = "Attack distribution",
xaxis = list(title = "TYPE"),
yaxis = list(range = c(0, 140)),
updatemenus = list(
list(
x = 1, y = 1,
buttons = list(
list(method = "restyle",
args = list("type", "box"),
label = "Boxplot"),
list(method = "restyle",
args = list("type", "violin"),
label = "Violinplot")
))
))
plot_ly(
data = df,
x = ~Type.2,
y = ~Speed,
type = "box"
) %>% layout(
title = "Attack distribution",
xaxis = list(title = "TYPE"),
yaxis = list(range = c(0, 140)),
updatemenus = list(
list(
x = 1, y = 1,
buttons = list(
list(method = "restyle",
args = list("type", "box"),
label = "Boxplot"),
list(method = "restyle",
args = list("type", "violin"),
label = "Violinplot")
))
))
plot_ly(
data = df,
x = ~Type.1,
y = ~Speed,
type = "box"
) %>% layout(
title = "Attack distribution",
xaxis = list(title = "TYPE"),
yaxis = list(range = c(0, 140)),
updatemenus = list(
list(
x = 1, y = 1,
buttons = list(
list(method = "restyle",
args = list("type", "box"),
label = "Boxplot"),
list(method = "restyle",
args = list("type", "violin"),
label = "Violinplot")
))
))
plot_ly(
data = df_evolution,
x = ~Stage,
y = ~Attack,
color = ~evolution,
colors = "Set1",
type = "scatter",
mode = "lines+markers",
marker = list(size = 10)
) %>%
layout(
xaxis = list(tickvals = c(1, 2, 3)),
sliders = list(
list(
active = 0,
currentvalue = list(prefix = "Palette: "),
pad = list(t = 60),
steps = steps
)
)
)
View(df_evolution)
## 3D
plot_ly(
data = df,
x = ~Attack,
y = ~Defense,
z = ~HP,
color = ~Type.1,
colors = "Set1",
type = "scatter3d",
mode = "markers"
)
?lapply
plot_ly(
data = df,
x = ~Type.1,
y = ~Speed,
type = "box"
) %>% layout(
title = "Attack distribution",
xaxis = list(title = "TYPE"),
yaxis = list(range = c(0, 140)),
updatemenus = list(
list(
x = 1, y = 1,
buttons = list(
list(method = "restyle",
args = list("type", "box"),
label = "Boxplot"),
list(method = "restyle",
args = list("type", "violin"),
label = "Violinplot")
))
))
## animation https://plotly.com/r/animations
plot_ly(x = ~rnorm(50), type = "histogram")
X <- data.frame()
for (m in seq(-5, 5, 1)) {
new_X <- data.frame(
value = rnorm(100, m),
mean = m
)
X <- rbind(X, new_X)
}
<<<<<<< HEAD
df_zuzia<-process_daily_data2(zuzia_apps_df1,"Zuzia")
View(df_zuzia)
View(df_zuzia)
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
shiny::runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
shiny::runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
install.packages("shinycssloaders")
install.packages("shinyjs")
install.packages("shinyjs")
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
runApp('C:/Users/Zuzia/Desktop/twd2_repo/TWD2/Aplikacja')
>>>>>>> 305474c4edee742db628a779a0cff8429bb48c65
=======
fig <- plot_ly(data = X, x = ~value, frame = ~mean, type = "histogram")
fig
shiny::runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
?outputOptions
?plotOutput
library(PogromcyDanych)
renv::install("PogromcyDanych")
install("PogromcyDanych")
install("PogromcyDanych")
renv::install("PogromcyDanych")
install.packages("PogromcyDanych")
library(PogromcyDanych)
library(ggplot2)
library(dplyr)
library(PogromcyDanych)
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
#faithful %>%
# ggplot(aes(x=))
#hist(x, breaks = bins, col = 'darkgray', border = 'white',
#    xlab = 'Waiting time to next eruption (in mins)',
#   main = 'Histogram of waiting times')
})
# Define server logic required to draw a histogram
server <- function(input, output) {
output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
x    <- faithful[, 2]
bins <- seq(min(x), max(x), length.out = input$bins + 1)
# draw the histogram with the specified number of bins
#faithful %>%
# ggplot(aes(x=))
#hist(x, breaks = bins, col = 'darkgray', border = 'white',
#    xlab = 'Waiting time to next eruption (in mins)',
#   main = 'Histogram of waiting times')
})
}
serialeIMDB %>% View()
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
?selectInput
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
install.packages("PogromcyDanych")
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(ggplot2)
library(scales)
library(tidyr)
df <- read.csv("house_data.csv")
df_4 <- df %>%
mutate(bedroom_category = ifelse(bedrooms >= 8, "8+ ", as.character(bedrooms)))
ggplot(df_4, aes(x = log(sqft_living), y = log(sqft_lot), color = bedroom_category)) +
geom_point(alpha = 0.4, size = 0.5) +
labs(title = "Zależność między powierzchnią mieszkania a powierzchnią gruntu",
x = expression("Logarytm powierzchni mieszkalnej"~(ft^2)),
y = expression("Logarytm powierzchni gruntu"~(ft^2)),
color = "Liczba sypialni") +
theme_minimal() +
scale_color_viridis_d(option = "H")+
guides(color = guide_legend(override.aes = list(size = 4)))
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
?checkboxInput
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/laby/Lab9')
shiny::runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/projekt_2/TWD2/Aplikacja')
runApp('C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/projekt_2/TWD2/Aplikacja')
setwd("C:/Users/milek/Edukacja/Studia/Semestr3/TWD_2024/projekt_2/TWD2/Aplikacja")
shiny::runApp()
runApp()
>>>>>>> 9358b177838ff8eae7667a5a5d24db29fcf29957
